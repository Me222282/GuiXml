using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;

namespace GuiXml
{
    class Program
    {
        public static bool AbsRefs = false;
        
        static void Main(string[] args)
        {
            Console.SetError(new ErrorWriter(Console.Error));
            
            List<string> typeNames = new List<string>();
            bool types = false;
            int pathEnd = args.Length;
            
            for (int i = 0; i < args.Length; i++)
            {
                string arg = args[i];
                
                if (arg == "--abs")
                {
                    AbsRefs = true;
                    continue;
                }
                
                if (types)
                {
                    typeNames.Add(arg);
                    continue;
                }
                
                if (arg == "--")
                {
                    pathEnd = i;
                    types = true;
                    continue;
                }
            }
            
            if (pathEnd == 0)
            {
                Console.Error.WriteLine($"Missing path argument");
                return;
            }
            
            // args[0] will exist here
            _asm = FindAsm(args[0]);
            // error
            if (_asm == null) { return; }
            
            string rootspace = _asm.DefinedTypes.FindType("Program").Namespace;
            
            string funcArgs;
            try
            {
                _xml = new Xml(_asm, typeNames, rootspace);
                Type[] insts = _xml.EventTypes.Where(t => !t.IsAbstract || !t.IsSealed).ToArray();
                funcArgs = GenArgs(insts);
            }
            catch (Exception e)
            {
                Console.Error.WriteLine(e.Message);
                return;
            }
            
            foreach (string path in args.AsSpan(0, pathEnd))
            {
                if (path == "--abs") { continue; }
                
                if (!File.Exists(path))
                {
                    Console.Error.WriteLine($"{path} is not a file");
                    continue;
                }
                
                Console.WriteLine($"Starting {path}");
                FileStream input = new FileStream(path, FileMode.Open);
                FileStream output = new FileStream(path + ".cs", FileMode.Create);
                RunFile(input, output, Path.GetFileNameWithoutExtension(path), rootspace, funcArgs);
                Console.WriteLine($"Finished");
            }
        }
        
        static Xml _xml;
        static Assembly _asm;
        
        static Assembly FindAsm(string path)
        {
            string csproj = FindCSPROJ(Path.GetDirectoryName(path));
            if (csproj == null)
            {
                Console.Error.WriteLine("Could not find parent csproj");
                return null;
            }
            
            return LoadAssembly(csproj);
        }
        
        static void RunFile(Stream stream, Stream output, string name, string rootspace, string args)
        {
            try
            {
                CSWriter csw = new CSWriter(output);
                // auto gen comment
                csw.CommentLine();
                csw.CommentLine("Code auto generated by GuiXml.");
                csw.CommentLine();
                csw.WriteLine();
                
                if (!AbsRefs)
                {
                    csw.WriteLine("using System");
                    csw.WriteLine("using Zene.Structs");
                    csw.WriteLine("using Zene.Graphics");
                    csw.WriteLine("using Zene.Windowing");
                    csw.WriteLine("using Zene.GUI");
                    csw.WriteLine();
                }
                // TODO: use folders for subspaces
                csw.WriteLine($"namespace {rootspace}");
                csw.OpenContext();
                csw.WriteLine($"internal static class {name}");
                csw.OpenContext();
                if (AbsRefs)
                {
                    csw.WriteLine($"internal static void LoadGUI(Zene.GUI.ElementList el{args})");
                    csw.OpenContext();
                    csw.WriteLine("var root = el.Source");
                }
                else
                {
                    csw.WriteLine($"internal static void LoadGUI(ElementList el{args})");
                    csw.OpenContext();
                    csw.WriteLine("IElement root = el.Source");
                }
                // csw.WriteLine("ListActions add = el.StartGroupAction()");
                csw.WriteLine();
                
                _xml.TranscribeXml(stream, csw);
                
                // csw.WriteLine("add.Apply()");
                csw.CloseContext();
                csw.CloseContext();
                csw.CloseContext();
                
                csw.Close();
            }
            catch (Exception e)
            {
                Console.Error.WriteLine(e.Message);
                return;
            }
        }
        
        static string GenArgs(Type[] types)
        {
            StringBuilder sb = new StringBuilder();
            foreach (Type t in types)
            {
                sb.Append($", {t.Name} {t.Name.ToLower()}");
            }
            return sb.ToString();
        }
        
        static string FindCSPROJ(string dir)
        {
            while (dir != null)
            {
                foreach (string path in Directory.EnumerateFiles(dir))
                {
                    if (Path.GetExtension(path) != ".csproj") { continue; }
                    
                    return path;
                }
                
                dir = Directory.GetParent(dir)?.FullName;
            }
            
            return null;
        }
        static Assembly LoadAssembly(string csproj)
        {
            string name = Path.GetFileNameWithoutExtension(csproj);
            string dir = Path.GetDirectoryName(csproj);
            string dll = Path.Combine(dir, "bin", "Debug", "net8.0", $"{name}.dll");
            if (!File.Exists(dll))
            {
                Console.Error.WriteLine("Project has not been compiled or has an invalid bin structure.");
                return null;
            }
            
            try
            {
                return Assembly.LoadFrom(dll);
            }
            catch (Exception)
            {
                Console.Error.WriteLine("Failed to load project assembly.");
                return null;
            }
        }
    }
}
